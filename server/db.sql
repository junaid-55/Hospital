-- Drop the database if it exists
DROP DATABASE IF EXISTS HOSPITAL;

-- Create the database
CREATE DATABASE HOSPITAL;

-- Connect to the database
\c HOSPITAL;

-- Department table
CREATE TABLE DEPARTMENT (
    DEPARTMENT_ID SERIAL PRIMARY KEY,
    DEPARTMENT_TITLE VARCHAR(50),
    DESCRIPTION TEXT,
    CONTACT_NO VARCHAR(14) NOT NULL
);

-- Bed type table
CREATE TABLE BED_TYPE (
    BED_TYPE_ID SERIAL PRIMARY KEY,
    TYPE_NAME VARCHAR(50),
    DESCRIPTION TEXT
);

-- Bed table
CREATE TABLE BED (
    BED_ID SERIAL PRIMARY KEY,
    BED_TYPE_ID INT NOT NULL,
    PRICE INT,
    FOREIGN KEY (BED_TYPE_ID) REFERENCES BED_TYPE(BED_TYPE_ID)
);

-- Patient table
CREATE TABLE PATIENT (
    PATIENT_ID SERIAL PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    EMAIL VARCHAR(50) NOT NULL UNIQUE,
    CONTACT_NO VARCHAR(14) NOT NULL,
    PASSWORD VARCHAR(10)
);

-- Doctor table
CREATE TABLE DOCTOR (
    DOCTOR_ID SERIAL PRIMARY KEY,
    DEPARTMENT_ID INT,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    EXPERIENCE VARCHAR(50),
    SCHEDULE VARCHAR(50),
    TITLE VARCHAR(50),
    CONTACT_NO VARCHAR(14) NOT NULL,
    CONSULTATION_FEE INT,
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID)
);

-- Prescription table
CREATE TABLE PRESCRIPTION(
    DISEASE_NAME VARCHAR(250),
    PATIENT_NAME VARCHAR(250),
    DATE DATE,
    DRUG_NAME_WITH_TIME VARCHAR(250),
    ADVICE TEXT
);

-- Appointment table
CREATE TABLE APPOINTMENT (
    APPOINTMENT_ID SERIAL PRIMARY KEY,
    DOCTOR_ID INT,
    PATIENT_ID INT,
    OUT_PATIENT_ID INT,
    PRESCRIPTION_ID INT,
    TYPE VARCHAR(50),
    CONTACT_NO VARCHAR(14) NOT NULL,
    APPOINTMENT_DATE DATE,
    FOREIGN KEY (OUT_PATIENT_ID) REFERENCES OUT_PATIENT(OUT_PATIENT_ID),
    FOREIGN KEY (PRESCRIPTION_ID) REFERENCES PRESCRIPTION(PRESCRIPTION_ID),
    FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID),
    FOREIGN KEY (PATIENT_ID) REFERENCES PATIENT(PATIENT_ID)
);

-- Visit table
CREATE TABLE VISIT (
    VISIT_ID SERIAL PRIMARY KEY,
    DOCTOR_ID INT,
    PRESCRIPTION_ID INT,
    IN_PATIENT_ID INT,
    DATE DATE,
    FOREIGN KEY (PRESCRIPTION_ID) REFERENCES PRESCRIPTION(PRESCRIPTION_ID),
    FOREIGN KEY (IN_PATIENT_ID) REFERENCES IN_PATIENT(IN_PATIENT_ID),
    FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID)
);

-- Outpatient table
CREATE TABLE OUT_PATIENT (
   OUT_PATIENT_ID SERIAL PRIMARY KEY,
   APPOINTMENT_ID INT,
   CONTACT_NO VARCHAR(14),
   FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENT(APPOINTMENT_ID)
);

-- Inpatient table
CREATE TABLE IN_PATIENT (
    IN_PATIENT_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(255),
    VISIT_ID INT,
    APPOINTMENT_ID INT,
    CONTACT_NO VARCHAR(20),
    ADMIT_DATE DATE,
    DISCHARGE_DATE DATE,
    FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENT(APPOINTMENT_ID),
    FOREIGN KEY (VISIT_ID) REFERENCES VISIT(VISIT_ID)
);

-- Surgery table
CREATE TABLE SURGERY (
    SURGERY_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(100),
    TYPE VARCHAR(50),
    ROOM_NO VARCHAR(50),
    ROOM_NAME VARCHAR(80),
    PRICE INT
);

-- Surgery taken table
CREATE TABLE SURGERY_TAKEN (
    SURGERY_TAKEN_ID SERIAL PRIMARY KEY,
    IN_PATIENT_ID INT,
    SURGERY_ID INT,
    PRICE INT,
    STATUS VARCHAR(50),
    FOREIGN KEY (IN_PATIENT_ID) REFERENCES IN_PATIENT(IN_PATIENT_ID),
    FOREIGN KEY (SURGERY_ID) REFERENCES SURGERY(SURGERY_ID)
);

-- Surgery role table
CREATE TABLE SURGERY_ROLE (
   ROLE_ID SERIAL PRIMARY KEY,
   DOCTOR_ROLE VARCHAR(50),
   FEES_PERCENTAGE INT
);

-- Doctor surgery taken junction table
CREATE TABLE DOCTOR_SURGERY_TAKEN_JUNCTION(
    DOCTOR_ID INT,
    SURGERY_TAKEN_ID INT,
    FEES INT,
    ROLE_ID INT,
    FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTOR(DOCTOR_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES SURGERY_ROLE(ROLE_ID),
    FOREIGN KEY (SURGERY_TAKEN_ID) REFERENCES SURGERY_TAKEN(SURGERY_TAKEN_ID)
);

-- Drug table
CREATE TABLE  DRUG(
    DRUG_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(250),
    TYPE VARCHAR(100),
    DOSAGE VARCHAR(50),
    PRICE INT
);

-- Drug taken table
CREATE TABLE DRUG_TAKEN (
    DRUG_TAKEN_ID SERIAL PRIMARY KEY,
    DRUG_ID INT,
    QUANTITY INT,
    IN_PATIENT_ID INT,
    PRICE INT,
    FOREIGN KEY (DRUG_ID) REFERENCES DRUG(DRUG_ID),
    FOREIGN KEY (IN_PATIENT_ID) REFERENCES IN_PATIENT(IN_PATIENT_ID)
);

-- Test table
CREATE TABLE  TEST(
    TEST_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(250),
    TYPE VARCHAR(100),
    PRICE INT
);

-- Test taken table
CREATE TABLE TEST_TAKEN (
    TEST_TAKEN_ID SERIAL PRIMARY KEY,
    TEST_ID INT,
    RESULTS TEXT,
    IN_PATIENT_ID INT,
    OUT_PATIENT_ID INT,
    PRICE INT,
    FOREIGN KEY (TEST_ID) REFERENCES TEST(TEST_ID),
    FOREIGN KEY (IN_PATIENT_ID) REFERENCES IN_PATIENT(IN_PATIENT_ID),
    FOREIGN KEY (OUT_PATIENT_ID) REFERENCES OUT_PATIENT(OUT_PATIENT_ID)
);

-- Bill table
CREATE TABLE BILL(
    IN_PATIENT_ID INT,
    BILL_ID SERIAL PRIMARY KEY,
    AMOUNT INT,
    STATUS VARCHAR(50),
    BILL_TYPE VARCHAR(10),
    OUT_PATIENT_ID INT,
    FOREIGN KEY (IN_PATIENT_ID) REFERENCES IN_PATIENT(IN_PATIENT_ID),
    FOREIGN KEY (OUT_PATIENT_ID) REFERENCES OUT_PATIENT(OUT_PATIENT_ID)
);
